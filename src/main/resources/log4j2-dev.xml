<?xml version="1.0" encoding="UTF-8"?>
<!--level日志级别: ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF -->
<!--status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出。-->
<!--monitorInterval：Log4j2能够自动检测修改配置 文件和重新配置本身，设置间隔秒数,最小间隔为5s。-->
<Configuration status="off" monitorInterval="600">
    <!--properties:设置全局变量 -->
    <Properties>
        <!--LOG_HOME:指定当前日志存放的目录 -->
        <property name="LOG_HOME">logs</property>
        <!--ERROR_LOG_FILE_NAME:指定错误日志文件的名称 -->
        <property name="ERROR_LOG_FILE_NAME">error</property>
        <!--INFO_LOG_FILE_NAME:指定错误日志文件的名称 -->
        <property name="INFO_LOG_FILE_NAME">info</property>
        <!--PATTERN:指定日志输出格式 -->
        <Property name="PATTERN">[%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} - (%F:%L) - %m%n</Property>
    </Properties>
    <!--Appenders:定义日志输出目的地，内容和格式等 -->
    <Appenders>
        <!-- 控制台日志打印 -->
        <Console name="Console" target="SYSTEM_OUT">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <!--onMatch="ACCEPT" 表示匹配该级别及以上-->
            <!--onMatch="DENY" 表示不匹配该级别及以上-->
            <!--onMatch="NEUTRAL" 表示该级别及以上的，由下一个filter处理，如果当前是最后一个，则表示匹配该级别及以上-->
            <!--onMismatch="ACCEPT" 表示匹配该级别以下-->
            <!--onMismatch="NEUTRAL" 表示该级别及以下的，由下一个filter处理，如果当前是最后一个，则不匹配该级别以下的-->
            <!--onMismatch="DENY" 表示不匹配该级别以下的-->
            <Filters>
                <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <!--输出日志的格式-->
            <PatternLayout pattern="${PATTERN}"/>
        </Console>
        <!-- 服务器日志文件记录 -->
        <RollingRandomAccessFile name="ErrorLog" fileName="${LOG_HOME}/${ERROR_LOG_FILE_NAME}.log"
                                 filePattern="${LOG_HOME}/$${date:yyyy-MM}/${ERROR_LOG_FILE_NAME}.log.%d{yyyy-MM-dd}.gz">
            <PatternLayout pattern="${PATTERN}"/>
            <Filters>
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <!--Policies:触发策略决定何时执行备份 -->
            <Policies>
                <!--TimeBasedTriggeringPolicy:日志文件按照时间备份 -->
                <!--interval:每1天生成一个新文件，需要结合filePattern时间%d{yyyy-MM-dd} -->
                <!--同理，如果要每1小时生成一个新文件，则改成%d{yyyy-MM-ddHH} -->
                <!--modulate:对备份日志的生成时间纠偏，纠偏以0为基准进行，"0+interval"决定启动后第一次备份时间 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
                <!--SizeBasedTriggeringPolicy:日志文件按照大小备份 -->
                <!--size:指定日志文件最大为128MB，单位可以为KB、MB或GB -->
                <SizeBasedTriggeringPolicy size="128MB" />
            </Policies>
            <!--DefaultRolloverStrategy:翻转策略决定如何执行备份 -->
            <!--max:最多保存5个日志备份文件，结合时间使用后，在每个时间段内最多有5个备份，多出来的会被覆盖 -->
            <!--compressionLevel:配置日志压缩级别，范围0-9，0不压缩，1压缩速度最快，9压缩率最好，目前只对于zip压缩文件类型有效 -->
            <DefaultRolloverStrategy max="10" compressionLevel="1">
                <!--Delete:删除匹配到的过期备份日志文件 -->
                <!--maxDepth:由于备份日志保存在${LOG_HOME}/$${date:yyyy-MM},所以目录深度设置为2 -->
                <Delete basePath="${LOG_HOME}" maxDepth="2">
                    <!--IfFileName:匹配文件名称 -->
                    <!--glob:匹配2级目录深度下的以.log.gz结尾的备份文件 -->
                    <IfFileName glob="*/*.log.*.gz" />
                    <!--IfLastModified:匹配文件修改时间 -->
                    <!--age:匹配超过180天的文件，单位D、H、M、S分别表示天、小时、分钟、秒-->
                    <IfLastModified age="2D" />
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>
        <RollingRandomAccessFile name="InfoLog" fileName="${LOG_HOME}/${INFO_LOG_FILE_NAME}.log"
                                 filePattern="${LOG_HOME}/$${date:yyyy-MM}/${INFO_LOG_FILE_NAME}.log.%d{yyyy-MM-dd}.gz">
            <PatternLayout pattern="${PATTERN}"/>
            <Filters>
                <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <!--Policies:触发策略决定何时执行备份 -->
            <Policies>
                <!--TimeBasedTriggeringPolicy:日志文件按照时间备份 -->
                <!--interval:每1天生成一个新文件，需要结合filePattern时间%d{yyyy-MM-dd} -->
                <!--同理，如果要每1小时生成一个新文件，则改成%d{yyyy-MM-ddHH} -->
                <!--modulate:对备份日志的生成时间纠偏，纠偏以0为基准进行，"0+interval"决定启动后第一次备份时间 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
                <!--SizeBasedTriggeringPolicy:日志文件按照大小备份 -->
                <!--size:指定日志文件最大为128MB，单位可以为KB、MB或GB -->
                <SizeBasedTriggeringPolicy size="128MB" />
            </Policies>
            <!--DefaultRolloverStrategy:翻转策略决定如何执行备份 -->
            <!--max:最多保存5个日志备份文件，结合时间使用后，在每个时间段内最多有5个备份，多出来的会被覆盖 -->
            <!--compressionLevel:配置日志压缩级别，范围0-9，0不压缩，1压缩速度最快，9压缩率最好，目前只对于zip压缩文件类型有效 -->
            <DefaultRolloverStrategy max="10" compressionLevel="1">
                <!--Delete:删除匹配到的过期备份日志文件 -->
                <!--maxDepth:由于备份日志保存在${LOG_HOME}/$${date:yyyy-MM},所以目录深度设置为2 -->
                <Delete basePath="${LOG_HOME}" maxDepth="2">
                    <!--IfFileName:匹配文件名称 -->
                    <!--glob:匹配2级目录深度下的以.log.gz结尾的备份文件 -->
                    <IfFileName glob="*/*.log.*.gz" />
                    <!--IfLastModified:匹配文件修改时间 -->
                    <!--age:匹配超过180天的文件，单位D、H、M、S分别表示天、小时、分钟、秒-->
                    <IfLastModified age="2D" />
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>
        <!-- 服务器数据库错误日志记录 -->
        <Jdbc name="databaseAppender" tableName="log">
            <DriverManager connectionString="jdbc:postgresql://127.0.0.1:5432/short-url"
                           driverClassName="org.postgresql.Driver"
                           username="postgres" password="postgres" />
            <Column name="eventdate" isEventTimestamp="true" />
            <Column name="level" pattern="%level" isUnicode="false" />
            <Column name="logger" pattern="%logger{36}" isUnicode="false"/>
            <Column name="message" pattern="%message" isUnicode="false" />
            <Column name="exception" pattern="%exception"  isUnicode="false" />
        </Jdbc>
    </Appenders>
    <!--Loggers:定义日志级别和使用的Appends -->
    <Loggers>
        <!--additivity: true当前的Logger打印的日志附加到Root -->
        <logger name="vip.stqr" level="DEBUG" additivity="true">
            <appender-ref ref="databaseAppender" level="error"/>
        </logger>
        <AsyncLogger name="org.apache.ibatis" level="error" includeLocation="true"/>
        <AsyncLogger name="org.springframework.web" level="error" includeLocation="true"/>
        <AsyncRoot level="INFO" includeLocation="true">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="InfoLog"/>
            <AppenderRef ref="ErrorLog"/>
        </AsyncRoot>
    </Loggers>
</Configuration>